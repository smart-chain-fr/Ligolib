#import "ligo-generic-fa2/lib/multi_asset/fa2.mligo" "FA2"
#import "./constants.jsligo" "Constants"
#import "./storage.jsligo" "Storage"
#import "./extension.jsligo" "Extension"
#import "./errors.jsligo" "Errors"

export type storage = Storage.t
type result = [list<operation>, storage]

export type mintOrBurn = [@layout:comb] {
   owner    : address,
   token_id : nat,
   amount_  : nat,
};

export type permitParams = [key, [signature, bytes]];
export type expiryParams = [address, [nat, option<bytes>]];

let create = ([paramCreate, s] : [[FA2.TokenMetadata.data, address, nat], storage]) : result => {
    let [metadata,owner,amount] = paramCreate;
    let _ = Extension.assert_admin(s.extension);
    let md = Storage.add_new_token(s.token_metadata, metadata.token_id, metadata);
    let s = Storage.set_token_metadata(s, md);
    let ledger = FA2.Ledger.increase_token_amount_for_user(s.ledger)(owner)(metadata.token_id)(amount);
    let newStore = FA2.Storage.set_ledger(s)(ledger);
    let supply = Extension.create_supply(newStore.extension.tokenTotalSupply, metadata.token_id, amount);
    [Constants.noOperation, { ...newStore, extension : Extension.set_supply(s.extension, supply) }]
};

let mint = ([lst, s] : [list<mintOrBurn>, storage]) : result => {
    let _ = Extension.assert_admin(s.extension);
    let processOne = ([ledger_and_supply, param_mint] : [[FA2.Ledger.t, Extension.tokenTotalSupply], mintOrBurn]) : [FA2.Ledger.t, Extension.tokenTotalSupply] => {
        let [ledger,supply] = ledger_and_supply;
        let {owner,token_id,amount_} = param_mint;
        let _ = FA2.Storage.assert_token_exist(s)(token_id);
        [
            FA2.Ledger.increase_token_amount_for_user(ledger)(owner)(token_id)(amount_),
            Extension.increase_supply(supply, token_id, amount_)
        ]
    };
    let [ledger, supply] = List.fold_left(processOne, [s.ledger, s.extension.tokenTotalSupply], lst);
    let s = FA2.Storage.set_ledger(s)(ledger);
    [Constants.noOperation, { ...s, extension : Extension.set_supply(s.extension, supply) }]
};

let burn = ([lst, s] : [list<mintOrBurn>, storage]) : result => {
   let _ = Extension.assert_admin(s.extension);
   let processOne = ([ledger_and_supply, param_burn] : [[FA2.Ledger.t, Extension.tokenTotalSupply], mintOrBurn]) : [FA2.Ledger.t, Extension.tokenTotalSupply] => {
      let [ledger,supply] = ledger_and_supply;
      let {owner,token_id,amount_} = param_burn;
      [
        FA2.Ledger.decrease_token_amount_for_user(ledger)(owner)(token_id)(amount_),
        Extension.decrease_supply(supply, token_id, amount_)
      ]
    };
   let [ledger, supply] = List.fold_left(processOne, [s.ledger, s.extension.tokenTotalSupply], lst);
   let s = FA2.Storage.set_ledger(s)(ledger);
   [Constants.noOperation,{ ...s, extension : Extension.set_supply(s.extension, supply) }]
};

// TZIP-17
let permit = ([permits, s] : [list<permitParams>, storage]) : result => {
    let processPermit = ([ext, permit] : [Extension.t, permitParams]) : Extension.t => {
        let [pub_key, [sig, hash_]] = permit;
        let packed = Bytes.pack ([(Tezos.get_chain_id()), Tezos.get_self_address()], [ext.counter, hash_]);
        if (Crypto.check(pub_key, sig, packed)) {
            let sender_ = Tezos.address (Tezos.implicit_account (Crypto.hash_key(pub_key)));
            let paramPermitKey = [sender_, hash_];
            let ext_modified = match (Big_map.find_opt(paramPermitKey, ext.permits), {
                None: () => {
                    Extension.add_permit(ext, paramPermitKey)
                },
                Some: (submission_timestamp: timestamp) => {
                    let _ = Extension._check_not_expired(s.extension, submission_timestamp, paramPermitKey);
                    Extension.update_permit(ext, paramPermitKey)
                }
            });
            return ext_modified;
        } else {
            return (Michelson `{FAILWITH}` as ((n: [string, bytes]) => Extension.t)) ([Errors.missigned, packed])
        }
    };
    let extension = List.fold_left(processPermit, s.extension, permits);
    [Constants.noOperation, { ...s, extension : extension }]
};

// TZIP-17
let set_expiry = ([p, s] : [expiryParams, storage]) : result => {
    let [user_address, [seconds, permit_hash_opt]] = p;
    let _check_max_expiry : unit = assert_with_error((seconds <= s.extension.maxExpiry), Errors.maxSecondsExceeded);
    let _check_sender : unit = assert_with_error((Tezos.get_sender() == user_address), Errors.forbiddenExpiryUpdate);
    match (permit_hash_opt, {
        None: () => {
            return [
                Constants.noOperation,
                {...s, extension : { ...s.extension, 
                    userExpiries : Big_map.add(user_address, (Some(seconds)), s.extension.userExpiries) }}
            ];                        
        },
        Some: (permit_hash: bytes) => {
            return [
                Constants.noOperation,
                { ...s, extension : {...s.extension, permitExpiries : Big_map.add(
                    [user_address, permit_hash],
                    (Some(seconds)),
                    s.extension.permitExpiries)
                }}
            ]
        }
    });
};

// TZIP-17 implementation of TZIP-12 Transfer
let transfer_permitted = ([t, s]: [FA2.transfer, storage]) : result => {
     let makeTransfer = ([acc, t] : [[FA2.Ledger.t, Extension.t], FA2.transfer_from]) : [FA2.Ledger.t, Extension.t] => {
        let [ledger, ext] = acc;
        const [is_transfer_authorized, ext] = Extension.transfer_presigned(ext, t);
        const {from_, tx} = t;
        let applyTransfer = ([ledger, dst] : [FA2.Ledger.t, FA2.atomic_trans]) : FA2.Ledger.t => {
            let {token_id, amount, to_} = dst;
            let _ = FA2.Storage.assert_token_exist(s)(token_id);
            if (!is_transfer_authorized) {
                let _ = FA2.Operators.assert_authorisation(s.operators)(from_)(token_id);
                let ledger_modified = FA2.Ledger.decrease_token_amount_for_user(ledger)(from_)(token_id)(amount);
                let ledger_final = FA2.Ledger.increase_token_amount_for_user(ledger_modified)(to_)(token_id)(amount);
                return ledger_final
            } else {
                let ledger_modified = FA2.Ledger.decrease_token_amount_for_user(ledger)(from_)(token_id)(amount);
                let ledger_final = FA2.Ledger.increase_token_amount_for_user(ledger_modified)(to_)(token_id)(amount);
                return ledger_final
            }
        };
        let ledger = List.fold(applyTransfer, tx, ledger);
        [ledger, ext]
    };
    let [new_ledger, new_ext] = List.fold(makeTransfer, t, [s.ledger, s.extension]);
    [Constants.noOperation, { ...s, ledger : new_ledger, extension : new_ext }]
};

let set_admin = ([addr, s]: [address, storage]) : result => { 
    [Constants.noOperation, { ...s, extension : Extension.set_admin(s.extension, addr) }]
};

export type parameter = [@layout:comb]
    ["Transfer", FA2.transfer] |
    ["Balance_of", FA2.balance_of] |
    ["Update_operators", FA2.update_operators] |
    ["Create_token", [FA2.TokenMetadata.data, address, nat]] |
    ["Mint_token", list<mintOrBurn>] |
    ["Burn_token", list<mintOrBurn>] |
    ["Permit", list<permitParams>] |
    ["SetExpiry", expiryParams] |
    ["SetAdmin", address];

export let main = ([p,s]: [parameter, storage]): result => {
    return match (p, {
        Transfer:         (p: FA2.transfer) => transfer_permitted(p,s),
        Balance_of:       (p: FA2.balance_of) => FA2.balance_of(p)(s),
        Update_operators: (p: FA2.update_operators) => FA2.update_ops(p)(s),
        Create_token:     (p: [create_token, address, nat]) => create(p, s),
        Mint_token:       (p: list<mintOrBurn>) => mint(p, s),
        Burn_token:       (p: list<mintOrBurn>) => burn(p, s),
        Permit:           (p: list<permitParams>) => permit(p, s),
        SetExpiry:        (p: expiryParams) =>set_expiry(p, s),
        SetAdmin:         (p: address) => set_admin(p, s)
    })
};

//     Off-chain views required by TZIP-17
//     Command to run to get the micheline expressions to put in the metadata:
//     ligo compile expression cameligo '_get_counter' \
//         --init-file src/main.mligo \
//         --project-root . \
//         --michelson-format json

let _get_default_expiry = ([_,s]: [unit, storage]) : nat => {
    return s.extension.defaultExpiry
};

let _get_counter = ([_,s]: [unit, storage]) : nat => {
    return s.extension.counter
};